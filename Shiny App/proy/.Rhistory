### Quitamos las variables con alta correlación
movilidad <- movilidad[ , -4]
movilidad <- movilidad[ , -4]
corr <- cor(movilidad[,-c(1)])
ggcorrplot(corr, method = "circle",
hc.order = TRUE,
lab = TRUE,
outline.color = "white",
ggtheme = ggplot2::theme_gray,
colors = c("#6D9EC1", "white", "#E46726")) +
ggtitle("Correlograma de los medios de transporte CDMX") +
theme_minimal()
## Histograma y densidad del metro.
with(movilidad, hist(metro, freq = FALSE,breaks="Sturges", col="lightblue", title='Histograma de
dendsidad de la afluencia
en el metro de CDMX'))
lines(density(movilidad$metro), col="blue")
## Histograma y densidad del metrobus.
with(movilidad, hist(metrobus, freq = FALSE, breaks="Sturges", col="orange",title='Histograma de
dendsidad de la afluencia
en el metrobus de CDMX'))
lines(density(movilidad$metrobus), col="red", lty=3, lwd=4)
## Histograma y densidad del ecobici.
with(movilidad, hist(ecobici, freq = FALSE, breaks="Sturges", col="lightgreen",title='Histograma de
dendsidad de la afluencia
en ecobici de CDMX'))
lines(density(movilidad$ecobici), col="green", lty=3, lwd=4)
## Histograma y densidad del rtp.
with(automoviles, hist(transito, freq = FALSE, breaks="Sturges", col="gray"))
lines(density(automoviles$transito), col="black", lty=3, lwd=4)
####### Serie de tiempo de metro
metro_p <-ggplot(movilidad)+geom_line(aes(x=fecha,y=metro), color="orange", size=0.5)+
geom_point(aes(x=fecha,y=metro), size=0.5)+
ggtitle("Serie de tiempo afluencia en el metro")+
labs(x="Tiempo", y="metro")+
theme_bw()+theme(plot.title = element_text(hjust = 0.5))
metro_p <- ggplotly(metro_p)
####### Serie de tiempo de metrobus
metrobus_p<-ggplot(movilidad)+geom_line(aes(x=fecha,y=metrobus), color="red", size=0.5)+
geom_point(aes(x=fecha,y=metrobus), size=0.5)+
ggtitle("Serie de tiempo de afluencia en el metrobus")+
labs(x="Tiempo", y="metrobus")+
theme_bw()+theme(plot.title = element_text(hjust = 0.5))
metrobus_p <- ggplotly(metrobus_p)
metrobus_p
metro_p
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
grafica1
lines(density(movilidad$metro), col="blue")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
fig <- subplot(metro_p, metrobus_p, ecobico_p, autos_p,
nrows = 4, shareX = TRUE, margin = 0.05, titleY = TRUE)
fig
####### Serie de tiempo de metro
metro_p <-ggplot(movilidad)+geom_line(aes(x=fecha,y=metro), color="orange", size=0.5)+
geom_point(aes(x=fecha,y=metro), size=0.5)+
ggtitle("Serie de tiempo afluencia en el metro")+
labs(x="Tiempo", y="metro")+
theme_bw()+theme(plot.title = element_text(hjust = 0.5))
metro_p <- ggplotly(metro_p)
metro_p
####### Serie de tiempo de metrobus
metrobus_p<-ggplot(movilidad)+geom_line(aes(x=fecha,y=metrobus), color="red", size=0.5)+
geom_point(aes(x=fecha,y=metrobus), size=0.5)+
ggtitle("Serie de tiempo de afluencia en el metrobus")+
labs(x="Tiempo", y="metrobus")+
theme_bw()+theme(plot.title = element_text(hjust = 0.5))
metrobus_p <- ggplotly(metrobus_p)
metrobus_p
ecobico_p<-ggplot(movilidad)+geom_line(aes(x=fecha,y=ecobici), color="green", size=0.5)+
geom_point(aes(x=fecha,y=ecobici), size=0.5)+
ggtitle("Serie de tiempo de afluencia en ecobici")+
labs(x="Tiempo", y="ecobici") +
theme_bw()+theme(plot.title = element_text(hjust = 0.5))
ecobico_p <- ggplotly(ecobico_p)
ecobico_p
####### Serie de tiempo de autos
autos_p<-ggplot(automoviles)+geom_line(aes(x=fecha,y=transito), color="purple", size=0.5)+
geom_point(aes(x=fecha,y=transito), size=0.5)+
ggtitle("Series de tiempo de afluencia en transportes públicos y privados.",
subtitle = 'Valores en diferencias porcentuales')+
labs(x="Tiempo desde 24/marzo/2020 al 25/enero/2021", y="automovil") +
theme_bw()+theme(plot.title = element_text(hjust = 0.5))
autos_p <- ggplotly(autos_p)
autos_p
fig <- subplot(metro_p, metrobus_p, ecobico_p, autos_p,
nrows = 4, shareX = TRUE, margin = 0.05, titleY = TRUE)
fig
############################ MODELOS  Y SERIES DE TIEMPO ###############################
#### metro
ts_metro <- ts(movilidad$metro, start = c(2020, 3,24),
end = c(2021, 1, 25), frequency = 365)
metro_fit <- auto.arima(ts_metro)
pronostico<-forecast(metro_fit,12,level=95)
plot(pronostico,main="Pronóstico con auto.arima")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?box
runApp()
runApp()
date_strings = c("24.03.2020", "c[3].c[2].c[1]")
date_strings
date_strings = c("24.03.2020", c[3].c[2].c[1])
date_strings = c("24.03.2020", c[3]+"."+c[2]+"."c[1])
dia=25
mess=1
anio=2021
date_strings = c("24.03.2020", paste(anio,".",mess,".",dia))
date_strings
date_strings = c("24.03.2020", paste(dia,".",mess,".",anio))
date_strings
datetimes = strptime(date_strings, format = "%d.%m.%Y")
diff_in_days = difftime(datetimes[2], datetimes[1])
diff_in_days
diff_in_days = difftime(datetimes[2], datetimes[1],units=days)
diff_in_days = difftime(datetimes[2], datetimes[1],units="days")
diff_in_days
dia=25
mess=1
anio=2021
date_strings = c("24.03.2020", paste(dia,".",mess,".",anio))
date_strings
datetimes = strptime(date_strings, format = "%d.%m.%Y")
diff_in_days = difftime(datetimes[2], datetimes[1],units="days")
diff_in_days
date_strings = c("24.03.2020", paste(dia,".",mess,".",anio))
date_strings
datetimes = strptime(date_strings, format = "%d.%m.%Y")
date_strings
dia=25
mess=01
anio=2021
date_strings = c("24.03.2020", paste(dia,".",mess,".",anio))
date_strings
datetimes = strptime(date_strings, format = "%d.%m.%Y")
diff_in_days = difftime(datetimes[2], datetimes[1],units="days")
diff_in_days
date_strings = c("24.03.2020", paste(dia,mess,anio))
date_strings
datetimes = strptime(date_strings, format = "%d.%m.%Y")
diff_in_days = difftime(datetimes[2], datetimes[1],units="days")
diff_in_days
dia=25
mess=01
anio=2021
date_strings = c("24.03.2020", paste(dia,mess,anio))
date_strings
date_strings = c("24.03.2020", paste(dia.mess.anio))
date_strings = c("24.03.2020", paste(dia,mess,anio,sep = "."))
date_strings
datetimes = strptime(date_strings, format = "%d.%m.%Y")
diff_in_days = difftime(datetimes[2], datetimes[1],units="days")
diff_in_days
diff_in_days = difftime(datetimes[2], datetimes[1])
diff_in_days
date_strings = c("24.03.2020", paste(dia,mess,anio,sep = "."))
date_strings
datetimes = strptime(date_strings, format = "%d.%m.%Y")
diff_in_days = difftime(datetimes[2], datetimes[1])
diff_in_days
frec=diff_in_days
frec
class(frec)
frec=as.double(diff_in_days
frec
frec
frec=as.double(diff_in_days)
frec
runApp()
?forecast
frec
periodos=round(frec/12)
periodos
periodos=round(frec/30)
periodos
runApp()
runApp()
runApp()
runApp()
#importar datos.
datos <- read.csv("Monitoreo de Tráfico de Internet_2.csv", header = TRUE,
sep = ",", check.names = FALSE)
#Inspeccionar datos.
head(datos)
class(datos)
str(datos)
#Transformamos las columnas de factor a asu correspondiente tipo.
datos <- mutate(datos, Fecha = as.Date(Fecha, "%m/%d/%Y"))
str(datos)
#gather() -> Gather Columns Into Key-Value Pairs.
df <- datos %>%
select(Fecha, Proveedor, Trafico_Datos_Local)
head(df, 3)
head(df, 3)
#Separamos los datos de la companias mas "Influyentes".
list_of_values <- c("CLARO", "MOVISTAR", "UNE", "DIRECTV")
filtered <- filter(datos, Proveedor %in% list_of_values)
movistar <- filter(datos, Proveedor == "MOVISTAR")
claro <- filter(datos, Proveedor == "CLARO")
une <- filter(datos, Proveedor == "UNE")
directv <- filter(datos, Proveedor == "DIRECTV")
ggplot(filtered, aes(x = Fecha, y = Trafico_Datos_Local)) +
geom_area(aes(color = Proveedor, fill = Proveedor),
alpha = 0.5, position=position_dodge(0.8)) +
ggtitle("Trafico de datos durante la pandemia") +
xlab("Mes 2020") +
ylab("Datos en GB") +
theme_minimal() +
scale_color_manual(values=c("#00AFBB", "#E7B800", "#CC0000", "#006600",
"#669999", "#00CCCC", "#660099", "#CC0066",
"#FF9999", "#FF99FF", "#559955", "#A990CC",
"#660099", "#CC0066")) +
scale_fill_manual(values=c( "#00AFBB", "#E7B800", "#CC0000", "#006600",
"#669999", "#00CCCC", "#660099", "#CC0066",
"#FF9999", "#FF99FF", "#559955", "#A990CC",
"#660099", "#CC0066"))
runApp()
ggplot(filtered, aes(x=Fecha, y=Trafico_Datos_Local, colour = Proveedor)) +
ggtitle("Trafico de datos durante la pandemia")+
xlab("Mes")+
ylab("Datos en GB") +
geom_point() +
theme_minimal()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(filtered, aes(x = Fecha, y = Trafico_Datos_Local)) +
geom_line(aes(color = Proveedor), size = 1) +
ggtitle("Series de tiempo de trafico local")+
xlab("Mes")+
ylab("Datos en GB") +
scale_color_manual(values=c("#00AFBB", "#E7B800","#CC0000", "#006600")) +
theme_minimal()
grafica_movi <- ggplot(movistar) +
geom_line(aes(x=Fecha, y= Trafico_Datos_Local), color="green", size=0.8) +
geom_point(aes(x=Fecha, y= Trafico_Datos_Local), size=1) +
ggtitle("Movistar") +
labs(x="Tiempo", y="Datos (GB)") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(grafica_movi)
grafica_une <- ggplot(une) +
geom_line(aes(x=Fecha, y= Trafico_Datos_Local), color="green", size=0.8) +
geom_point(aes(x=Fecha, y= Trafico_Datos_Local), size=1) +
ggtitle("Unefon") +
labs(x="Tiempo", y="Datos (GB)") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(grafica_une)
grafica_claro <- ggplot(claro) +
geom_line(aes(x=Fecha, y= Trafico_Datos_Local), color="green", size=0.8) +
geom_point(aes(x=Fecha, y= Trafico_Datos_Local), size=1) +
ggtitle("Claro") +
labs(x="Tiempo", y="Datos (GB)") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(grafica_claro)
grafica_directv <- ggplot(directv) +
geom_line(aes(x=Fecha, y= Trafico_Datos_Local), color="green", size=0.8) +
geom_point(aes(x=Fecha, y= Trafico_Datos_Local), size=1) +
ggtitle("Directv") +
labs(x="Tiempo", y="Datos (GB)") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(grafica_directv)
f <- list(family = "Courier New, monospace", size = 18, color = "black")
a <- list( text = "Movistar", font = f, xref = "paper", yref = "paper",
yanchor = "bottom", xanchor = "center", align = "center", x = 0.5,
y = 1, showarrow = FALSE)
b <- list(text = "Claro", font = f, xref = "paper", yref = "paper",
yanchor = "bottom", xanchor = "center", align = "center", x = 0.5,
y = 1, showarrow = FALSE)
c <- list(text = "Unefon", font = f, xref = "paper", yref = "paper",
yanchor = "bottom", xanchor = "center", align = "center", x = 0.5,
y = 1, showarrow = FALSE)
d <- list(text = "DirecTV", font = f, xref = "paper", yref = "paper",
yanchor = "bottom", xanchor = "center", align = "center", x = 0.5,
y = 1, showarrow = FALSE)
x <- list(title = "Fecha")
y <- list(title = "Datos (GB)")
p1 <- plot_ly(movistar, x = ~Fecha, y = ~Trafico_Datos_Local) %>%
add_lines(color = I("green"), name = "1st", legendgroup = "1st") %>%
layout(annotations = a, xaxis=x, yaxis=y) %>% hide_legend()
p2 <- plot_ly(claro, x = ~Fecha, y = ~Trafico_Datos_Local) %>%
add_lines(color = I("red"), name = "1st", legendgroup = "1st") %>%
layout(annotations = b, xaxis=x, yaxis=y) %>% hide_legend()
p3 <- plot_ly(une, x = ~Fecha, y = ~Trafico_Datos_Local) %>%
add_lines(color = I("yellow"), name = "1st", legendgroup = "1st") %>%
layout(annotations = c, xaxis=x, yaxis=y) %>% hide_legend()
p4 <- plot_ly(directv, x = ~Fecha, y = ~Trafico_Datos_Local) %>%
add_lines(color = I("orange"), name = "1st", legendgroup = "1st") %>%
layout(annotations = d, xaxis=x, yaxis=y) %>% hide_legend()
subplot(p1,p2,p3,p4,nrows = 2, margin = 0.07, titleX = T, titleY = T)
#Los datos atipicos mas observables se normalizaron (7, 24 y el 31 de diciembre)
#por el promedio del dia anterior con el dia posterior.
ts_movistar = ts(movistar$Trafico_Datos_Local, start = c(2020,3,30),
end = c(2021,1,26), frequency = 300)
plot(ts_movistar)
ma_ts_movistar <- ma(ts_movistar,2)
plot(ma_ts_movistar)
acf(ts_movistar, prob = T, ylab = "", xlab = "", main = "")
pacf(ts_movistar, main='PACF for Differenced Series')
modelo_arima_movistar <- auto.arima(ma_ts_movistar)
prediccion_movistar <- forecast(modelo_arima_movistar,10,level=95)
Box.test(residuals(modelo_arima_movistar), type = 'Ljung-Box')
plot(prediccion_movistar)
ggplot(filtered, aes(x = Fecha, y = Trafico_Datos_Local)) +
geom_line(aes(color = Proveedor), size = 1) +
ggtitle("Series de tiempo de trafico local")+
xlab("Mes")+
ylab("Datos en GB") +
scale_color_manual(values=c("#00AFBB", "#E7B800","#CC0000", "#006600")) +
theme_minimal()
grafica_movi <- ggplot(movistar) +
geom_line(aes(x=Fecha, y= Trafico_Datos_Local), color="green", size=0.8) +
geom_point(aes(x=Fecha, y= Trafico_Datos_Local), size=1) +
ggtitle("Movistar") +
labs(x="Tiempo", y="Datos (GB)") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(grafica_movi)
ggplot(filtered, aes(x=Fecha, y=Trafico_Datos_Local, colour = Proveedor)) +
ggtitle("Trafico de datos durante la pandemia")+
xlab("Mes")+
ylab("Datos en GB") +
geom_point() +
theme_minimal()
#Nel compa.
#lot(filtered$Fecha, filtered$Trafico_Datos_Local)
head(filtered)
ggplot(filtered, aes(x=Fecha, y=Trafico_Datos_Local, colour = Proveedor, size=Trafico_Datos_Total_Dia)) +
ggtitle("Trafico de datos durante la pandemia")+
xlab("Mes")+
ylab("Datos en GB") +
geom_point() +
theme_minimal()
ggplot(filtered, aes(x=Fecha, y=Trafico_Datos_Local, colour = Proveedor, size=Trafco_Internacional)) +
ggtitle("Trafico de datos durante la pandemia")+
xlab("Mes")+
ylab("Datos en GB") +
geom_point() +
theme_minimal()
ggplot(filtered, aes(x=Fecha, y=Trafico_Datos_Local, colour = Proveedor)) +
ggtitle("Trafico de datos durante la pandemia")+
xlab("Mes")+
ylab("Datos en GB") +
geom_point() +
theme_minimal()
ggplot(filtered, aes(x=Fecha, y=Trafico_Datos_Local, colour = Proveedor)) +
ggtitle("Trafico de datos durante la pandemia")+
xlab("Mes")+
ylab("Datos en GB") +
geom_boxplot() +
theme_minimal()
ggplot(filtered, aes(x=Proveedor, y=Trafico_Datos_Local)) +
ggtitle("Trafico de datos durante la pandemia")+
xlab("Mes")+
ylab("Datos en GB") +
geom_boxplot() +
theme_minimal()
ggplot(filtered, aes(x=Proveedor, y=Trafico_Datos_Local)) +
ggtitle("Trafico de datos durante la pandemia")+
xlab("Mes")+
ylab("Datos en GB") +
geom_boxplot() +
theme_light()
ggplot(filtered, aes(x=Proveedor, y=Trafico_Datos_Local)) +
ggtitle("Trafico de datos durante la pandemia")+
xlab("Mes")+
ylab("Datos en GB") +
geom_boxplot() +
theme_test()
ggplot(filtered, aes(x=Proveedor, y=Trafico_Datos_Local)) +
ggtitle("Trafico de datos durante la pandemia")+
xlab("Mes")+
ylab("Datos en GB") +
geom_boxplot() +
themeSelector()
ggplot(filtered, aes(x=Proveedor, y=Trafico_Datos_Local)) +
ggtitle("Trafico de datos durante la pandemia")+
xlab("Mes")+
ylab("Datos en GB") +
geom_boxplot() +
theme_linedraw()
ggplot(filtered, aes(x=Proveedor, y=Trafico_Datos_Local)) +
ggtitle("Trafico de datos durante la pandemia")+
xlab("Mes")+
ylab("Datos en GB") +
geom_boxplot() +
theme_update()
ggplot(filtered, aes(x=Proveedor, y=Trafico_Datos_Local)) +
ggtitle("Trafico de datos durante la pandemia")+
xlab("Mes")+
ylab("Datos en GB") +
geom_boxplot() +
theme_set()
ggplot(filtered, aes(x=Proveedor, y=Trafico_Datos_Local)) +
ggtitle("Trafico de datos durante la pandemia")+
xlab("Mes")+
ylab("Datos en GB") +
geom_boxplot() +
theme_bw()
ggplot(filtered, aes(x=Proveedor, y=Trafico_Datos_Local)) +
ggtitle("Trafico de datos durante la pandemia")+
xlab("Mes")+
ylab("Datos en GB") +
geom_boxplot() +
theme_dark()
ggplot(filtered, aes(x=Proveedor, y=Trafico_Datos_Local, color=Proveedor)) +
ggtitle("Trafico de datos durante la pandemia")+
xlab("Mes")+
ylab("Datos en GB") +
geom_boxplot() +
theme_dark()
ggplot(filtered, aes(x=Proveedor, y=Trafico_Datos_Local, color=Proveedor)) +
ggtitle("Trafico de datos durante la pandemia")+
xlab("Mes")+
ylab("Datos en GB") +
geom_boxplot() +
theme_light()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x <- list(title = "Fecha")
y <- list(title = "Datos (GB)")
p1 <- plot_ly(movistar, x = ~Fecha, y = ~Trafico_Datos_Local) %>%
add_lines(color = I("green"), name = "1st", legendgroup = "1st") %>%
layout(annotations = a, xaxis=x, yaxis=y) %>% hide_legend()
#Los datos atipicos mas observables se normalizaron (7, 24 y el 31 de diciembre)
#por el promedio del dia anterior con el dia posterior.
ts_movistar = ts(movistar$Trafico_Datos_Local, start = c(2020,3,30),
end = c(2021,1,26), frequency = 300)
plot(ts_movistar)
ma_ts_movistar <- ma(ts_movistar,2)
plot(ma_ts_movistar)
acf(ts_movistar, prob = T, ylab = "", xlab = "", main = "")
pacf(ts_movistar, main='PACF for Differenced Series')
modelo_arima_movistar <- auto.arima(ma_ts_movistar)
prediccion_movistar <- forecast(modelo_arima_movistar,10,level=95)
Box.test(residuals(modelo_arima_movistar), type = 'Ljung-Box')
plot(prediccion_movistar)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?img
?img
runApp()
runApp()
runApp()
runApp()
runApp()
